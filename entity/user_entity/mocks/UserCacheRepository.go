// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserCacheRepository is an autogenerated mock type for the UserCacheRepository type
type UserCacheRepository struct {
	mock.Mock
}

// GetDailyUserSwapProfile provides a mock function with given fields: ctx, userID
func (_m *UserCacheRepository) GetDailyUserSwapProfile(ctx context.Context, userID int64) ([]int64, error) {
	ret := _m.Called(ctx, userID)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []int64); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyUserViewProfile provides a mock function with given fields: ctx, userID
func (_m *UserCacheRepository) GetDailyUserViewProfile(ctx context.Context, userID int64) ([]int64, error) {
	ret := _m.Called(ctx, userID)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []int64); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDailyUserSwapProfile provides a mock function with given fields: ctx, userID, swapedUserId
func (_m *UserCacheRepository) SetDailyUserSwapProfile(ctx context.Context, userID int64, swapedUserId int64) error {
	ret := _m.Called(ctx, userID, swapedUserId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, swapedUserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDailyUserViewProfile provides a mock function with given fields: ctx, userID, viewedUserId
func (_m *UserCacheRepository) SetDailyUserViewProfile(ctx context.Context, userID int64, viewedUserId int64) error {
	ret := _m.Called(ctx, userID, viewedUserId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, viewedUserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserCacheRepository creates a new instance of UserCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserCacheRepository(t mockConstructorTestingTNewUserCacheRepository) *UserCacheRepository {
	mock := &UserCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
