// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user_entity "github.com/IbnAnjung/datting/entity/user_entity"
	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// GetRandomUserProfile provides a mock function with given fields: ctx, input
func (_m *UserUseCase) GetRandomUserProfile(ctx context.Context, input user_entity.DetailUserInput) (user_entity.DetailUserOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 user_entity.DetailUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user_entity.DetailUserInput) (user_entity.DetailUserOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user_entity.DetailUserInput) user_entity.DetailUserOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(user_entity.DetailUserOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user_entity.DetailUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
