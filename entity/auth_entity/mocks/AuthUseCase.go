// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_entity "github.com/IbnAnjung/datting/entity/auth_entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, input
func (_m *AuthUseCase) Login(ctx context.Context, input auth_entity.LoginInput) (auth_entity.LoginOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 auth_entity.LoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_entity.LoginInput) (auth_entity.LoginOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth_entity.LoginInput) auth_entity.LoginOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(auth_entity.LoginOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth_entity.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, input
func (_m *AuthUseCase) Register(ctx context.Context, input auth_entity.RegisterInput) (auth_entity.RegisterOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 auth_entity.RegisterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_entity.RegisterInput) (auth_entity.RegisterOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth_entity.RegisterInput) auth_entity.RegisterOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(auth_entity.RegisterOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth_entity.RegisterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUseCase(t mockConstructorTestingTNewAuthUseCase) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
